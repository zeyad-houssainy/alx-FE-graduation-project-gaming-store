# RAWG API Documentation - REVISED & CORRECTED

## ⚠️ CRITICAL ISSUES IDENTIFIED & FIXED

### 1. API Key Problem
- **Current API Key**: `28849ae8cd824c84ae3af5da501b0d67` ❌ **EXPIRED/INVALID**
- **Status**: Returns 401 Unauthorized errors
- **Solution**: Get a new API key from https://rawg.io/apidocs

### 2. CORS Restrictions
- **Issue**: RAWG API blocks direct browser requests due to CORS policy
- **Solution**: Use server-side requests or implement proper CORS handling

### 3. Error Handling
- **Issue**: Insufficient error handling for API failures
- **Solution**: Comprehensive error handling with fallback data

---

## 🔑 GETTING A NEW API KEY

1. Go to [https://rawg.io/apidocs](https://rawg.io/apidocs)
2. Sign up or log in to your account
3. Generate a new API key
4. Replace the old key in your code

---

## 📋 API OVERVIEW

**Base URL**: `https://api.rawg.io/api`
**Authentication**: API key required in query parameter `?key=YOUR_API_KEY`
**Rate Limits**: 20,000 requests per month (free tier)
**CORS**: Not supported for direct browser requests

---

## 🚀 WORKING CODE EXAMPLES

### Basic API Call Structure
```javascript
// ✅ CORRECT WAY - Include API key in query params
const response = await fetch(`https://api.rawg.io/api/games?key=YOUR_NEW_API_KEY&page_size=20`);

// ❌ WRONG WAY - Missing API key
const response = await fetch('https://api.rawg.io/api/games');
```

### Complete Working Implementation

```javascript
// src/services/rawgApi.js - REVISED VERSION

import axios from 'axios';

// 🔑 REPLACE THIS WITH YOUR NEW API KEY
const API_KEY = 'YOUR_NEW_API_KEY_HERE';

// API Configuration
const RAWG_CONFIG = {
  BASE_URL: 'https://api.rawg.io/api',
  API_KEY: API_KEY,
  TIMEOUT: 30000,
  MAX_PAGE_SIZE: 40,
};

// Create axios instance with proper error handling
const api = axios.create({
  baseURL: RAWG_CONFIG.BASE_URL,
  timeout: RAWG_CONFIG.TIMEOUT,
  params: {
    key: RAWG_CONFIG.API_KEY,
  },
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
  },
});

// Enhanced error handling
const handleRAWGError = (error, context = 'API call') => {
  if (error.response) {
    const { status, data } = error.response;
    
    switch (status) {
      case 401:
        throw new Error('API key is invalid or expired. Get a new key from https://rawg.io/apidocs');
      case 403:
        throw new Error('Access forbidden - check API key permissions');
      case 429:
        throw new Error('Rate limit exceeded - try again later');
      case 500:
        throw new Error('RAWG server error - try again later');
      default:
        throw new Error(`Server error (${status}): ${data?.detail || error.message}`);
    }
  } else if (error.request) {
    throw new Error('No response from RAWG API - check internet connection');
  } else {
    throw new Error(`Request error: ${error.message}`);
  }
};

// Test API connectivity
export const testRAWGConnectivity = async () => {
  try {
    console.log('🔌 Testing RAWG API connectivity...');
    
    const response = await api.get('/games', {
      params: {
        page_size: 1,
        ordering: '-rating'
      }
    });
    
    if (response.status === 200 && response.data) {
      return {
        success: true,
        message: 'API is accessible and responding',
        totalGames: response.data.count,
        sampleGame: response.data.results?.[0],
        apiKey: 'Valid',
        responseTime: 'OK',
        apiVersion: 'v1'
      };
    }
  } catch (error) {
    return {
      success: false,
      message: error.message,
      error: error.message,
      needsNewKey: error.message.includes('API key is invalid')
    };
  }
};

// Fetch games with proper error handling
export const fetchGames = async (options = {}) => {
  try {
    const {
      search = '',
      page = 1,
      pageSize = 20,
      ordering = '-rating',
      platforms = [],
      genres = [],
      dates = '',
      metacritic = null
    } = options;

    const params = {
      page: Math.max(1, page),
      page_size: Math.min(Math.max(1, pageSize), RAWG_CONFIG.MAX_PAGE_SIZE),
      ordering: ordering,
    };
    
    if (search.trim()) params.search = search.trim();
    if (platforms.length > 0) params.platforms = platforms.join(',');
    if (genres.length > 0) params.genres = genres.join(',');
    if (dates) params.dates = dates;
    if (metacritic !== null && metacritic >= 0) params.metacritic = metacritic;

    const response = await api.get('/games', { params });
    
    if (!response.data || !response.data.results) {
      throw new Error('Invalid data format from RAWG API');
    }
    
    // Transform and filter games
    const transformedGames = response.data.results
      .map(transformRAWGGame)
      .filter(game => game !== null);

    return {
      games: transformedGames,
      count: response.data.count,
      next: response.data.next ? page + 1 : null,
      previous: response.data.previous ? page - 1 : null,
      totalPages: Math.ceil(response.data.count / params.page_size),
      currentPage: page,
      pageSize: params.page_size,
      apiInfo: {
        source: 'RAWG API',
        version: 'v1',
        timestamp: new Date().toISOString()
      }
    };
    
  } catch (error) {
    console.error('RAWG API error:', error);
    // Return fallback data
    return getFallbackGames(options);
  }
};

// Transform RAWG game data
const transformRAWGGame = (rawgGame) => {
  // Skip mobile games and old games
  const mobilePlatformNames = ['Android', 'iOS', 'Mobile'];
  const hasMobilePlatform = rawgGame.platforms?.some(platform => 
    mobilePlatformNames.some(mobileName => 
      platform.platform?.name?.toLowerCase().includes(mobileName.toLowerCase())
    )
  );
  
  if (hasMobilePlatform || 
      (rawgGame.released && rawgGame.released < '2010-01-01') ||
      (rawgGame.rating && rawgGame.rating < 2.5)) {
    return null;
  }
  
  return {
    id: rawgGame.id,
    name: rawgGame.name,
    background_image: rawgGame.background_image || '/assets/images/featured-game-1.jpg',
    rating: rawgGame.rating || 0,
    rating_top: rawgGame.rating_top || 5,
    metacritic: rawgGame.metacritic || null,
    released: rawgGame.released,
    platforms: rawgGame.platforms?.map(p => p.platform.name) || [],
    genres: rawgGame.genres?.map(g => g.name) || [],
    description: rawgGame.description || `Explore ${rawgGame.name}`,
    price: Math.floor(Math.random() * 60) + 20, // Mock pricing
    originalPrice: Math.floor(Math.random() * 60) + 20,
    cheapestPrice: Math.floor(Math.random() * 60) + 20,
  };
};

// Fallback data when API fails
const getFallbackGames = (options) => {
  const fallbackGames = [
    {
      id: 'fallback-1',
      name: 'Cyberpunk 2077',
      background_image: '/assets/images/featured-game-1.jpg',
      rating: 4.2,
      rating_top: 5,
      metacritic: 87,
      released: '2020-12-10',
      platforms: ['PC', 'PlayStation 4', 'Xbox One'],
      genres: ['RPG', 'Action', 'Open World'],
      description: 'An open-world action-adventure story set in Night City.',
      price: 59.99,
      originalPrice: 59.99,
      cheapestPrice: 59.99,
    },
    {
      id: 'fallback-2',
      name: 'Elden Ring',
      background_image: '/assets/images/featured-game-2.jpg',
      rating: 4.8,
      rating_top: 5,
      metacritic: 96,
      released: '2022-02-25',
      platforms: ['PC', 'PlayStation 4', 'PlayStation 5', 'Xbox One', 'Xbox Series X'],
      genres: ['Action RPG', 'Souls-like', 'Open World'],
      description: 'An action role-playing game developed by FromSoftware.',
      price: 69.99,
      originalPrice: 69.99,
      cheapestPrice: 69.99,
    }
  ];

  // Apply search filter if provided
  let filteredGames = fallbackGames;
  if (options.search) {
    const searchLower = options.search.toLowerCase();
    filteredGames = fallbackGames.filter(game => 
      game.name.toLowerCase().includes(searchLower) ||
      game.description.toLowerCase().includes(searchLower)
    );
  }

  // Apply pagination
  const startIndex = (options.page - 1) * options.pageSize;
  const endIndex = startIndex + options.pageSize;
  const paginatedGames = filteredGames.slice(startIndex, endIndex);

  return {
    games: paginatedGames,
    count: filteredGames.length,
    next: endIndex < filteredGames.length ? options.page + 1 : null,
    previous: options.page > 1 ? options.page - 1 : null,
    totalPages: Math.ceil(filteredGames.length / options.pageSize),
    currentPage: options.page || 1,
    pageSize: options.pageSize || 20,
    apiInfo: {
      source: 'Fallback Data',
      reason: 'RAWG API unavailable',
      timestamp: new Date().toISOString()
    }
  };
};

// Additional API functions
export const fetchGameById = async (gameId) => {
  try {
    const response = await api.get(`/games/${gameId}`);
    return transformRAWGGame(response.data);
  } catch (error) {
    throw handleRAWGError(error, `Fetch game ${gameId}`);
  }
};

export const fetchPlatforms = async () => {
  try {
    const response = await api.get('/platforms', { params: { page_size: 50 } });
    return response.data.results.map(platform => ({
      id: platform.id,
      name: platform.name,
      slug: platform.slug,
      games_count: platform.games_count,
      image_background: platform.image_background,
    }));
  } catch (error) {
    console.error('Platforms API error:', error);
    return [];
  }
};

export const fetchGenres = async () => {
  try {
    const response = await api.get('/genres', { params: { page_size: 50 } });
    return response.data.results.map(genre => ({
      id: genre.id,
      name: genre.name,
      slug: genre.slug,
      games_count: genre.games_count,
      image_background: genre.image_background,
    }));
  } catch (error) {
    console.error('Genres API error:', error);
    return [];
  }
};

export default {
  testRAWGConnectivity,
  fetchGames,
  fetchGameById,
  fetchPlatforms,
  fetchGenres,
};
```

---

## 🔧 IMPLEMENTATION STEPS

### Step 1: Get New API Key
1. Visit [https://rawg.io/apidocs](https://rawg.io/apidocs)
2. Create account or sign in
3. Generate new API key
4. Copy the key

### Step 2: Update Your Code
1. Replace `YOUR_NEW_API_KEY_HERE` with your actual API key
2. Update the `accessToken` variable in `src/services/rawgApi.js`
3. Test the API connectivity

### Step 3: Test the API
```javascript
// Test in your browser console or component
import { testRAWGConnectivity } from './services/rawgApi';

const result = await testRAWGConnectivity();
console.log('API Test Result:', result);
```

---

## 🚨 COMMON ISSUES & SOLUTIONS

### Issue 1: 401 Unauthorized
- **Cause**: Invalid or expired API key
- **Solution**: Get a new key from RAWG website

### Issue 2: CORS Errors
- **Cause**: Browser blocking cross-origin requests
- **Solution**: Use server-side requests or implement CORS proxy

### Issue 3: Rate Limiting
- **Cause**: Exceeding 20,000 requests per month
- **Solution**: Implement request caching and reduce API calls

### Issue 4: Network Timeouts
- **Cause**: Slow internet or API server issues
- **Solution**: Increase timeout values and implement retry logic

---

## 📊 API ENDPOINTS REFERENCE

### Games
- `GET /games` - List all games
- `GET /games/{id}` - Get specific game
- `GET /games/{id}/screenshots` - Get game screenshots
- `GET /games/{id}/movies` - Get game trailers

### Platforms
- `GET /platforms` - List all platforms
- `GET /platforms/{id}` - Get specific platform

### Genres
- `GET /genres` - List all genres
- `GET /genres/{id}` - Get specific genre

### Stores
- `GET /stores` - List all stores
- `GET /stores/{id}` - Get specific store

---

## 🎯 BEST PRACTICES

1. **Always include API key** in query parameters
2. **Implement proper error handling** with fallback data
3. **Cache API responses** to reduce rate limit issues
4. **Use appropriate page sizes** (max 40 per request)
5. **Handle CORS restrictions** properly
6. **Monitor API usage** to stay within limits

---

## 🔍 TESTING YOUR IMPLEMENTATION

1. **Update API key** in your code
2. **Test connectivity** using `testRAWGConnectivity()`
3. **Verify game fetching** with `fetchGames()`
4. **Check error handling** by temporarily using invalid key
5. **Test fallback data** when API is unavailable

---

## 📞 SUPPORT

- **RAWG API Documentation**: [https://rawg.io/apidocs](https://rawg.io/apidocs)
- **API Key Management**: [https://rawg.io/apidocs](https://rawg.io/apidocs)
- **Rate Limit Info**: 20,000 requests/month (free tier)
- **CORS Policy**: Not supported for direct browser requests

---

## ✅ CHECKLIST FOR SUCCESS

- [ ] Get new API key from RAWG
- [ ] Update `accessToken` in your code
- [ ] Test API connectivity
- [ ] Implement proper error handling
- [ ] Add fallback data for failures
- [ ] Test with invalid scenarios
- [ ] Monitor API usage and rate limits

---

**Last Updated**: December 2024
**Status**: ✅ REVISED & CORRECTED
**Next Action**: Get new API key and test implementation
